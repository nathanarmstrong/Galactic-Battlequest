David's SQL notes:

BEGIN;

-- ================ --
-- Setup the tables --
-- ================ --

CREATE TABLE users (
  id SERIAL PRIMARY KEY NOT NULL,
  username VARCHAR NOT NULL UNIQUE
);

CREATE TABLE friendships (
  id SERIAL PRIMARY KEY NOT NULL,
  requested_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
  accepted_at TIMESTAMP WITHOUT TIME ZONE
);

CREATE TABLE friendships_users (
  id SERIAL PRIMARY KEY NOT NULL,
  user_id INTEGER NOT NULL,
  friendship_id INTEGER NOT NULL,
  initiator BOOLEAN NOT NULL,
  UNIQUE (user_id, friendship_id),
  UNIQUE (friendship_id, initiator)
);

-- ================= --
-- Create some users --
-- ================= --

INSERT INTO users (username) VALUES
  ('User 1'),
  ('User 2');

-- ========================================= --
-- User 1 requests to be friends with User 2 --
-- ========================================= --

INSERT INTO friendships (requested_at) VALUES (now());
INSERT INTO friendships_users (user_id, friendship_id, initiator) VALUES
  (1, 1, true),
  (2, 1, false);

-- ================================================= --
-- User 1's friends list does not yet include User 2 --
-- ================================================= --

-- This is the query for getting someone's friends list
-- The FROM clause traverses from users to friendships and back to users
-- It needs to use aliases for the tables that appear twice, otherwise the table names would be ambiguous
-- The WHERE clause specifies:
-- - we're looking for User 1's friends
-- - we need to exclude User 1 from the list
-- - we only want accepted friendships, not pending ones
-- The WHERE clause can be modified to find only pending friendships by removing NOT
SELECT
  friends.username
FROM
  users AS friends
  JOIN friendships_users AS friendships_friends ON friendships_friends.user_id = friends.id
  JOIN friendships ON friendships.id = friendships_friends.friendship_id
  JOIN friendships_users ON friendships_users.friendship_id = friendships.id
  JOIN users ON friendships_users.user_id = users.id
WHERE
  users.id = 1
  AND friends.id <> 1
  AND friendships.accepted_at IS NOT NULL
ORDER BY
  friendships.requested_at DESC;

-- ============================= --
-- User 2 accepts the friendship --
-- ============================= --

UPDATE friendships SET accepted_at = now() WHERE id = 1;

-- ========================================= --
-- Now User 1's friends list includes User 2 --
-- ========================================= --

-- This is the same friends list query from above
SELECT
  friends.username
FROM
  users AS friends
  JOIN friendships_users AS friendships_friends ON friendships_friends.user_id = friends.id
  JOIN friendships ON friendships.id = friendships_friends.friendship_id
  JOIN friendships_users ON friendships_users.friendship_id = friendships.id
  JOIN users ON friendships_users.user_id = users.id
WHERE
  users.id = 1
  AND friends.id <> 1
  AND friendships.accepted_at IS NOT NULL
ORDER BY
  friendships.requested_at DESC;

ROLLBACK;
